/**
 * TaxBot Vietnam - eTax API Integration
 * T√≠ch h·ª£p API eTax c·ªßa T·ªïng c·ª•c Thu·∫ø Vi·ªát Nam
 */

import axios from 'axios';

// eTax API Configuration
const ETAX_CONFIG = {
  baseURL: process.env.ETAX_API_URL || 'https://etax.gdt.gov.vn/api',
  timeout: 30000,
  headers: {
    'Content-Type': 'application/json',
    'User-Agent': 'TaxBot-Vietnam/1.0'
  }
};

// Interface cho d·ªØ li·ªáu c√° nh√¢n t·ª´ eTax
interface PersonalTaxInfo {
  taxpayerCode: string;
  fullName: string;
  idNumber: string;
  address: string;
  taxPeriod: string;
  declarationStatus: string;
  paymentStatus: string;
  dueDate: string;
  totalTaxAmount: number;
  paidAmount: number;
  remainingAmount: number;
  penalties?: number;
}

// Interface cho h·ªì s∆° n·ªôp thu·∫ø
interface TaxDeclaration {
  declarationId: string;
  taxpayerCode: string;
  declarationType: string;
  taxPeriod: string;
  submissionDate: string;
  status: 'submitted' | 'processing' | 'approved' | 'rejected';
  documents: TaxDocument[];
  totalTaxAmount: number;
  notes?: string;
}

interface TaxDocument {
  documentId: string;
  documentType: string;
  fileName: string;
  fileSize: number;
  uploadDate: string;
  digitalSignature?: string;
}

// Interface cho ch·ªØ k√Ω s·ªë
interface DigitalSignature {
  customerId: string;
  certificateSerial: string;
  issuerName: string;
  validFrom: string;
  validTo: string;
  publicKey: string;
  isActive: boolean;
}

export class ETaxService {
  private apiClient = axios.create(ETAX_CONFIG);

  /**
   * X√°c th·ª±c v·ªõi eTax API s·ª≠ d·ª•ng ch·ªØ k√Ω s·ªë
   */
  async authenticateWithDigitalSignature(signature: DigitalSignature): Promise<string> {
    try {
      const response = await this.apiClient.post('/auth/digital-signature', {
        certificateSerial: signature.certificateSerial,
        publicKey: signature.publicKey,
        timestamp: new Date().toISOString()
      });

      return response.data.accessToken;
    } catch (error) {
      console.error('eTax authentication failed:', error);
      throw new Error('X√°c th·ª±c eTax kh√¥ng th√†nh c√¥ng');
    }
  }

  /**
   * L·∫•y th√¥ng tin c√° nh√¢n t·ª´ eTax theo s·ªë ƒë·ªãnh danh c√° nh√¢n
   */
  async getPersonalTaxInfo(taxpayerCode: string, accessToken: string): Promise<PersonalTaxInfo> {
    try {
      const response = await this.apiClient.get(`/taxpayer/${taxpayerCode}/info`, {
        headers: { Authorization: `Bearer ${accessToken}` }
      });

      return response.data;
    } catch (error) {
      console.error('Failed to get personal tax info:', error);
      throw new Error('Kh√¥ng th·ªÉ l·∫•y th√¥ng tin thu·∫ø c√° nh√¢n');
    }
  }

  /**
   * L·∫•y danh s√°ch h·ªì s∆° n·ªôp thu·∫ø
   */
  async getTaxDeclarations(taxpayerCode: string, accessToken: string, year?: number): Promise<TaxDeclaration[]> {
    try {
      const params = year ? { year } : {};
      const response = await this.apiClient.get(`/taxpayer/${taxpayerCode}/declarations`, {
        headers: { Authorization: `Bearer ${accessToken}` },
        params
      });

      return response.data.declarations;
    } catch (error) {
      console.error('Failed to get tax declarations:', error);
      throw new Error('Kh√¥ng th·ªÉ l·∫•y danh s√°ch h·ªì s∆° n·ªôp thu·∫ø');
    }
  }

  /**
   * N·ªôp h·ªì s∆° thu·∫ø t·ª± ƒë·ªông
   */
  async submitTaxDeclaration(
    taxpayerCode: string, 
    declarationData: any,
    documents: Buffer[],
    signature: DigitalSignature,
    accessToken: string
  ): Promise<TaxDeclaration> {
    try {
      // T·∫°o form data v·ªõi t√†i li·ªáu ƒë√≠nh k√®m
      const formData = new FormData();
      formData.append('taxpayerCode', taxpayerCode);
      formData.append('declarationData', JSON.stringify(declarationData));
      formData.append('digitalSignature', JSON.stringify(signature));

      // Th√™m t√†i li·ªáu
      documents.forEach((doc, index) => {
        formData.append(`document_${index}`, new Blob([doc]), `document_${index}.pdf`);
      });

      const response = await this.apiClient.post('/declarations/submit', formData, {
        headers: { 
          Authorization: `Bearer ${accessToken}`,
          'Content-Type': 'multipart/form-data'
        }
      });

      return response.data;
    } catch (error) {
      console.error('Failed to submit tax declaration:', error);
      throw new Error('N·ªôp h·ªì s∆° thu·∫ø kh√¥ng th√†nh c√¥ng');
    }
  }

  /**
   * Ki·ªÉm tra tr·∫°ng th√°i h·ªì s∆°
   */
  async checkDeclarationStatus(declarationId: string, accessToken: string): Promise<TaxDeclaration> {
    try {
      const response = await this.apiClient.get(`/declarations/${declarationId}/status`, {
        headers: { Authorization: `Bearer ${accessToken}` }
      });

      return response.data;
    } catch (error) {
      console.error('Failed to check declaration status:', error);
      throw new Error('Kh√¥ng th·ªÉ ki·ªÉm tra tr·∫°ng th√°i h·ªì s∆°');
    }
  }

  /**
   * L·∫•y th√¥ng tin h√≥a ƒë∆°n ƒëi·ªán t·ª≠
   */
  async getElectronicInvoices(taxpayerCode: string, accessToken: string, fromDate?: string, toDate?: string): Promise<any[]> {
    try {
      const params = { fromDate, toDate };
      const response = await this.apiClient.get(`/taxpayer/${taxpayerCode}/invoices`, {
        headers: { Authorization: `Bearer ${accessToken}` },
        params
      });

      return response.data.invoices;
    } catch (error) {
      console.error('Failed to get electronic invoices:', error);
      throw new Error('Kh√¥ng th·ªÉ l·∫•y th√¥ng tin h√≥a ƒë∆°n ƒëi·ªán t·ª≠');
    }
  }

  /**
   * Ki·ªÉm tra h·∫°n n·ªôp thu·∫ø
   */
  async getTaxDeadlines(taxpayerCode: string, accessToken: string): Promise<any[]> {
    try {
      const response = await this.apiClient.get(`/taxpayer/${taxpayerCode}/deadlines`, {
        headers: { Authorization: `Bearer ${accessToken}` }
      });

      return response.data.deadlines;
    } catch (error) {
      console.error('Failed to get tax deadlines:', error);
      throw new Error('Kh√¥ng th·ªÉ l·∫•y th√¥ng tin h·∫°n n·ªôp thu·∫ø');
    }
  }
}

// Storage cho ch·ªØ k√Ω s·ªë
export class DigitalSignatureStorage {
  private signatures = new Map<string, DigitalSignature>();

  /**
   * L∆∞u ch·ªØ k√Ω s·ªë c·ªßa kh√°ch h√†ng
   */
  async saveSignature(customerId: string, signature: DigitalSignature): Promise<void> {
    this.signatures.set(customerId, signature);
    console.log(`üíæ Saved digital signature for customer: ${customerId}`);
  }

  /**
   * L·∫•y ch·ªØ k√Ω s·ªë c·ªßa kh√°ch h√†ng
   */
  async getSignature(customerId: string): Promise<DigitalSignature | null> {
    return this.signatures.get(customerId) || null;
  }

  /**
   * Ki·ªÉm tra ch·ªØ k√Ω s·ªë c√≤n hi·ªáu l·ª±c
   */
  async isSignatureValid(customerId: string): Promise<boolean> {
    const signature = await this.getSignature(customerId);
    if (!signature) return false;

    const now = new Date();
    const validTo = new Date(signature.validTo);
    
    return signature.isActive && now < validTo;
  }

  /**
   * L·∫•y danh s√°ch ch·ªØ k√Ω s·ªë s·∫Øp h·∫øt h·∫°n
   */
  async getExpiringSoon(daysBeforeExpiry: number = 30): Promise<DigitalSignature[]> {
    const now = new Date();
    const checkDate = new Date(now.getTime() + (daysBeforeExpiry * 24 * 60 * 60 * 1000));
    
    const expiring: DigitalSignature[] = [];
    
    for (const signature of this.signatures.values()) {
      const validTo = new Date(signature.validTo);
      if (validTo <= checkDate && signature.isActive) {
        expiring.push(signature);
      }
    }

    return expiring;
  }
}

// Singleton instances
export const etaxService = new ETaxService();
export const digitalSignatureStorage = new DigitalSignatureStorage();