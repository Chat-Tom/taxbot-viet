/**
 * TaxBot Vietnam - Tax Reminder Scheduler
 * H·ªá th·ªëng nh·∫Øc nh·ªü n·ªôp thu·∫ø t·ª± ƒë·ªông theo l·ªãch Vi·ªát Nam
 */

import cron from 'node-cron';
import { etaxService, digitalSignatureStorage } from './etax-integration';
import { sendEmail } from './email-service';
import { jsonStorage } from './json-storage';

// Interface cho l·ªãch thu·∫ø
interface TaxSchedule {
  id: string;
  name: string;
  description: string;
  cronExpression: string;
  dueDate: string;
  taxType: 'monthly' | 'quarterly' | 'annual';
  isActive: boolean;
}

// Interface cho th√¥ng b√°o thu·∫ø
interface TaxNotification {
  id: string;
  customerId: string;
  scheduleId: string;
  message: string;
  type: 'reminder' | 'warning' | 'overdue';
  sentAt: string;
  status: 'sent' | 'failed' | 'pending';
}

// L·ªãch thu·∫ø Vi·ªát Nam
const TAX_SCHEDULES: TaxSchedule[] = [
  {
    id: 'monthly_personal',
    name: 'Thu·∫ø thu nh·∫≠p c√° nh√¢n h√†ng th√°ng',
    description: 'N·ªôp thu·∫ø TNCN h√†ng th√°ng tr∆∞·ªõc ng√†y 20',
    cronExpression: '0 9 20 * *', // 9:00 AM ng√†y 20 m·ªói th√°ng
    dueDate: '20',
    taxType: 'monthly',
    isActive: true
  },
  {
    id: 'quarterly_vat',
    name: 'Thu·∫ø GTGT theo qu√Ω',
    description: 'N·ªôp thu·∫ø GTGT theo qu√Ω tr∆∞·ªõc ng√†y 30',
    cronExpression: '0 9 30 1,4,7,10 *', // 9:00 AM ng√†y 30 th√°ng 1,4,7,10 (ƒë·∫ßu qu√Ω)
    dueDate: '30',
    taxType: 'quarterly',
    isActive: true
  },
  {
    id: 'annual_finalization',
    name: 'Quy·∫øt to√°n thu·∫ø TNCN',
    description: 'Quy·∫øt to√°n thu·∫ø TNCN tr∆∞·ªõc ng√†y 30/3',
    cronExpression: '0 9 30 3 *', // 9:00 AM ng√†y 30/3 h√†ng nƒÉm
    dueDate: '30/3',
    taxType: 'annual',
    isActive: true
  },
  {
    id: 'annual_declaration',
    name: 'Khai b√°o thu·∫ø TNCN nƒÉm',
    description: 'Khai b√°o thu·∫ø TNCN nƒÉm tr∆∞·ªõc ng√†y 30/4',
    cronExpression: '0 9 30 4 *', // 9:00 AM ng√†y 30/4 h√†ng nƒÉm
    dueDate: '30/4',
    taxType: 'annual',
    isActive: true
  },
  {
    id: 'provisional_tax',
    name: 'Thu·∫ø t·∫°m t√≠nh cu·ªëi nƒÉm',
    description: 'N·ªôp thu·∫ø t·∫°m t√≠nh cu·ªëi nƒÉm tr∆∞·ªõc ng√†y 15/12',
    cronExpression: '0 9 15 12 *', // 9:00 AM ng√†y 15/12 h√†ng nƒÉm
    dueDate: '15/12',
    taxType: 'annual',
    isActive: true
  }
];

export class TaxSchedulerService {
  private notifications: TaxNotification[] = [];
  private scheduledJobs: Map<string, any> = new Map();

  constructor() {
    this.initializeSchedules();
  }

  /**
   * Kh·ªüi t·∫°o t·∫•t c·∫£ l·ªãch thu·∫ø
   */
  private initializeSchedules(): void {
    TAX_SCHEDULES.forEach(schedule => {
      if (schedule.isActive) {
        this.scheduleJob(schedule);
      }
    });
    
    // Kh·ªüi t·∫°o job ki·ªÉm tra h√†ng ng√†y
    this.scheduleDailyCheck();
    
    console.log('üìÖ Tax scheduler initialized with', TAX_SCHEDULES.length, 'schedules');
  }

  /**
   * L√™n l·ªãch c√¥ng vi·ªác cho m·ªôt lo·∫°i thu·∫ø
   */
  private scheduleJob(schedule: TaxSchedule): void {
    const job = cron.schedule(schedule.cronExpression, async () => {
      await this.handleTaxReminder(schedule);
    }, {
      scheduled: true,
      timezone: 'Asia/Ho_Chi_Minh'
    });

    this.scheduledJobs.set(schedule.id, job);
    console.log(`üìÖ Scheduled job: ${schedule.name} - ${schedule.cronExpression}`);
  }

  /**
   * Ki·ªÉm tra h√†ng ng√†y cho c√°c tr∆∞·ªùng h·ª£p ƒë·∫∑c bi·ªát
   */
  private scheduleDailyCheck(): void {
    // Ch·∫°y l√∫c 8:00 AM m·ªói ng√†y
    cron.schedule('0 8 * * *', async () => {
      await this.checkUpcomingDeadlines();
      await this.checkOverdueDeclarations();
      await this.checkElectronicInvoices();
    }, {
      scheduled: true,
      timezone: 'Asia/Ho_Chi_Minh'
    });

    console.log('üìÖ Daily check scheduled at 8:00 AM');
  }

  /**
   * X·ª≠ l√Ω nh·∫Øc nh·ªü thu·∫ø
   */
  private async handleTaxReminder(schedule: TaxSchedule): Promise<void> {
    try {
      console.log(`üîî Processing tax reminder: ${schedule.name}`);
      
      // L·∫•y danh s√°ch kh√°ch h√†ng
      const customers = await jsonStorage.getSubmissions();
      
      for (const customer of customers) {
        // Ki·ªÉm tra c√≥ ch·ªØ k√Ω s·ªë kh√¥ng
        const hasSignature = await digitalSignatureStorage.isSignatureValid(customer.id);
        
        if (hasSignature) {
          // G·ª≠i th√¥ng b√°o t·ª± ƒë·ªông
          await this.sendTaxReminder(customer, schedule);
        } else {
          // G·ª≠i th√¥ng b√°o y√™u c·∫ßu ch·ªØ k√Ω s·ªë
          await this.sendSignatureRequest(customer, schedule);
        }
      }
      
      console.log(`‚úÖ Tax reminder processed for ${customers.length} customers`);
    } catch (error) {
      console.error(`‚ùå Failed to process tax reminder: ${schedule.name}`, error);
    }
  }

  /**
   * G·ª≠i th√¥ng b√°o nh·∫Øc thu·∫ø
   */
  private async sendTaxReminder(customer: any, schedule: TaxSchedule): Promise<void> {
    const notification: TaxNotification = {
      id: `${customer.id}_${schedule.id}_${Date.now()}`,
      customerId: customer.id,
      scheduleId: schedule.id,
      message: `Nh·∫Øc nh·ªü: ${schedule.name} - H·∫°n n·ªôp: ${schedule.dueDate}`,
      type: 'reminder',
      sentAt: new Date().toISOString(),
      status: 'pending'
    };

    try {
      // G·ª≠i email
      const emailSent = await sendEmail({
        to: customer.email,
        from: 'noreply@taxbot.vn',
        subject: `üîî Nh·∫Øc nh·ªü n·ªôp thu·∫ø - ${schedule.name}`,
        html: this.generateReminderEmail(customer, schedule)
      });

      notification.status = emailSent ? 'sent' : 'failed';
      this.notifications.push(notification);

      console.log(`üìß Tax reminder sent to ${customer.email}: ${schedule.name}`);
    } catch (error) {
      notification.status = 'failed';
      this.notifications.push(notification);
      console.error(`‚ùå Failed to send tax reminder to ${customer.email}:`, error);
    }
  }

  /**
   * G·ª≠i y√™u c·∫ßu ch·ªØ k√Ω s·ªë
   */
  private async sendSignatureRequest(customer: any, schedule: TaxSchedule): Promise<void> {
    try {
      const emailSent = await sendEmail({
        to: customer.email,
        from: 'noreply@taxbot.vn',
        subject: 'üîë Y√™u c·∫ßu c·∫≠p nh·∫≠t ch·ªØ k√Ω s·ªë - TaxBot Vietnam',
        html: this.generateSignatureRequestEmail(customer, schedule)
      });

      console.log(`üîë Signature request sent to ${customer.email}`);
    } catch (error) {
      console.error(`‚ùå Failed to send signature request to ${customer.email}:`, error);
    }
  }

  /**
   * Ki·ªÉm tra h·∫°n n·ªôp thu·∫ø s·∫Øp t·ªõi
   */
  private async checkUpcomingDeadlines(): Promise<void> {
    try {
      const customers = await jsonStorage.getSubmissions();
      
      for (const customer of customers) {
        const signature = await digitalSignatureStorage.getSignature(customer.id);
        
        if (signature) {
          // L·∫•y th√¥ng tin h·∫°n n·ªôp t·ª´ eTax
          const accessToken = await etaxService.authenticateWithDigitalSignature(signature);
          const deadlines = await etaxService.getTaxDeadlines(customer.id, accessToken);
          
          // Ki·ªÉm tra c√°c h·∫°n n·ªôp trong 7 ng√†y t·ªõi
          const upcomingDeadlines = deadlines.filter(deadline => {
            const dueDate = new Date(deadline.dueDate);
            const now = new Date();
            const daysDiff = (dueDate.getTime() - now.getTime()) / (1000 * 60 * 60 * 24);
            return daysDiff > 0 && daysDiff <= 7;
          });
          
          if (upcomingDeadlines.length > 0) {
            await this.sendUpcomingDeadlineNotification(customer, upcomingDeadlines);
          }
        }
      }
    } catch (error) {
      console.error('‚ùå Failed to check upcoming deadlines:', error);
    }
  }

  /**
   * Ki·ªÉm tra c√°c khai b√°o qu√° h·∫°n
   */
  private async checkOverdueDeclarations(): Promise<void> {
    try {
      const customers = await jsonStorage.getSubmissions();
      
      for (const customer of customers) {
        const signature = await digitalSignatureStorage.getSignature(customer.id);
        
        if (signature) {
          const accessToken = await etaxService.authenticateWithDigitalSignature(signature);
          const personalInfo = await etaxService.getPersonalTaxInfo(customer.id, accessToken);
          
          if (personalInfo.remainingAmount > 0) {
            await this.sendOverdueNotification(customer, personalInfo);
          }
        }
      }
    } catch (error) {
      console.error('‚ùå Failed to check overdue declarations:', error);
    }
  }

  /**
   * Ki·ªÉm tra h√≥a ƒë∆°n ƒëi·ªán t·ª≠
   */
  private async checkElectronicInvoices(): Promise<void> {
    try {
      const customers = await jsonStorage.getSubmissions();
      
      for (const customer of customers) {
        const signature = await digitalSignatureStorage.getSignature(customer.id);
        
        if (signature) {
          const accessToken = await etaxService.authenticateWithDigitalSignature(signature);
          const invoices = await etaxService.getElectronicInvoices(customer.id, accessToken);
          
          // Ki·ªÉm tra h√≥a ƒë∆°n c√≥ v·∫•n ƒë·ªÅ
          const problematicInvoices = invoices.filter(invoice => 
            invoice.status === 'rejected' || invoice.status === 'warning'
          );
          
          if (problematicInvoices.length > 0) {
            await this.sendInvoiceWarning(customer, problematicInvoices);
          }
        }
      }
    } catch (error) {
      console.error('‚ùå Failed to check electronic invoices:', error);
    }
  }

  /**
   * G·ª≠i th√¥ng b√°o h·∫°n n·ªôp s·∫Øp t·ªõi
   */
  private async sendUpcomingDeadlineNotification(customer: any, deadlines: any[]): Promise<void> {
    try {
      await sendEmail({
        to: customer.email,
        from: 'noreply@taxbot.vn',
        subject: '‚ö†Ô∏è Th√¥ng b√°o h·∫°n n·ªôp thu·∫ø s·∫Øp t·ªõi',
        html: this.generateUpcomingDeadlineEmail(customer, deadlines)
      });
    } catch (error) {
      console.error('‚ùå Failed to send upcoming deadline notification:', error);
    }
  }

  /**
   * G·ª≠i th√¥ng b√°o qu√° h·∫°n
   */
  private async sendOverdueNotification(customer: any, personalInfo: any): Promise<void> {
    try {
      await sendEmail({
        to: customer.email,
        from: 'noreply@taxbot.vn',
        subject: 'üö® Th√¥ng b√°o qu√° h·∫°n n·ªôp thu·∫ø',
        html: this.generateOverdueEmail(customer, personalInfo)
      });
    } catch (error) {
      console.error('‚ùå Failed to send overdue notification:', error);
    }
  }

  /**
   * G·ª≠i c·∫£nh b√°o h√≥a ƒë∆°n
   */
  private async sendInvoiceWarning(customer: any, invoices: any[]): Promise<void> {
    try {
      await sendEmail({
        to: customer.email,
        from: 'noreply@taxbot.vn',
        subject: '‚ö†Ô∏è C·∫£nh b√°o h√≥a ƒë∆°n ƒëi·ªán t·ª≠',
        html: this.generateInvoiceWarningEmail(customer, invoices)
      });
    } catch (error) {
      console.error('‚ùå Failed to send invoice warning:', error);
    }
  }

  /**
   * T·∫°o email nh·∫Øc thu·∫ø
   */
  private generateReminderEmail(customer: any, schedule: TaxSchedule): string {
    return `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
        <h2 style="color: #da020e;">üîî Nh·∫Øc nh·ªü n·ªôp thu·∫ø</h2>
        <p>Ch√†o ${customer.firstName} ${customer.lastName},</p>
        
        <p><strong>${schedule.name}</strong> s·∫Øp ƒë·∫øn h·∫°n n·ªôp.</p>
        
        <div style="background: #f5f5f5; padding: 15px; border-radius: 5px; margin: 20px 0;">
          <p><strong>H·∫°n n·ªôp:</strong> ${schedule.dueDate}</p>
          <p><strong>Lo·∫°i thu·∫ø:</strong> ${schedule.description}</p>
        </div>
        
        <p>TaxBot Vietnam s·∫Ω t·ª± ƒë·ªông x·ª≠ l√Ω vi·ªác n·ªôp thu·∫ø cho b·∫°n n·∫øu b·∫°n ƒë√£ c·∫≠p nh·∫≠t ch·ªØ k√Ω s·ªë.</p>
        
        <p>Tr√¢n tr·ªçng,<br>ƒê·ªôi ng≈© TaxBot Vietnam</p>
      </div>
    `;
  }

  /**
   * T·∫°o email y√™u c·∫ßu ch·ªØ k√Ω s·ªë
   */
  private generateSignatureRequestEmail(customer: any, schedule: TaxSchedule): string {
    return `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
        <h2 style="color: #da020e;">üîë Y√™u c·∫ßu c·∫≠p nh·∫≠t ch·ªØ k√Ω s·ªë</h2>
        <p>Ch√†o ${customer.firstName} ${customer.lastName},</p>
        
        <p><strong>${schedule.name}</strong> s·∫Øp ƒë·∫øn h·∫°n n·ªôp, nh∆∞ng ch√∫ng t√¥i ch∆∞a c√≥ ch·ªØ k√Ω s·ªë c·ªßa b·∫°n.</p>
        
        <p>ƒê·ªÉ TaxBot Vietnam c√≥ th·ªÉ t·ª± ƒë·ªông n·ªôp thu·∫ø gi√∫p b·∫°n, vui l√≤ng c·∫≠p nh·∫≠t ch·ªØ k√Ω s·ªë ƒëi·ªán t·ª≠.</p>
        
        <div style="background: #fff3cd; padding: 15px; border-radius: 5px; margin: 20px 0; border-left: 4px solid #ffc107;">
          <p><strong>L∆∞u √Ω:</strong> Ch·ªØ k√Ω s·ªë c·∫ßn thi·∫øt ƒë·ªÉ x√°c th·ª±c v√† n·ªôp h·ªì s∆° thu·∫ø ƒëi·ªán t·ª≠.</p>
        </div>
        
        <p>Li√™n h·ªá v·ªõi ch√∫ng t√¥i ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ c·∫≠p nh·∫≠t ch·ªØ k√Ω s·ªë.</p>
        
        <p>Tr√¢n tr·ªçng,<br>ƒê·ªôi ng≈© TaxBot Vietnam</p>
      </div>
    `;
  }

  /**
   * T·∫°o email th√¥ng b√°o h·∫°n n·ªôp s·∫Øp t·ªõi
   */
  private generateUpcomingDeadlineEmail(customer: any, deadlines: any[]): string {
    const deadlineList = deadlines.map(d => 
      `<li>${d.taxType}: ${new Date(d.dueDate).toLocaleDateString('vi-VN')}</li>`
    ).join('');

    return `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
        <h2 style="color: #da020e;">‚ö†Ô∏è Th√¥ng b√°o h·∫°n n·ªôp thu·∫ø s·∫Øp t·ªõi</h2>
        <p>Ch√†o ${customer.firstName} ${customer.lastName},</p>
        
        <p>C√°c h·∫°n n·ªôp thu·∫ø s·∫Øp t·ªõi trong 7 ng√†y:</p>
        
        <ul style="background: #f8f9fa; padding: 15px; border-radius: 5px;">
          ${deadlineList}
        </ul>
        
        <p>TaxBot Vietnam s·∫Ω t·ª± ƒë·ªông x·ª≠ l√Ω vi·ªác n·ªôp thu·∫ø cho b·∫°n.</p>
        
        <p>Tr√¢n tr·ªçng,<br>ƒê·ªôi ng≈© TaxBot Vietnam</p>
      </div>
    `;
  }

  /**
   * T·∫°o email th√¥ng b√°o qu√° h·∫°n
   */
  private generateOverdueEmail(customer: any, personalInfo: any): string {
    return `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
        <h2 style="color: #dc3545;">üö® Th√¥ng b√°o qu√° h·∫°n n·ªôp thu·∫ø</h2>
        <p>Ch√†o ${customer.firstName} ${customer.lastName},</p>
        
        <p><strong>B·∫°n c√≥ kho·∫£n thu·∫ø ch∆∞a n·ªôp:</strong></p>
        
        <div style="background: #f8d7da; padding: 15px; border-radius: 5px; margin: 20px 0; border-left: 4px solid #dc3545;">
          <p><strong>S·ªë ti·ªÅn:</strong> ${personalInfo.remainingAmount.toLocaleString('vi-VN')} VND</p>
          <p><strong>Ph·∫°t ch·∫≠m n·ªôp:</strong> ${personalInfo.penalties?.toLocaleString('vi-VN') || 0} VND</p>
        </div>
        
        <p>Vui l√≤ng li√™n h·ªá v·ªõi ch√∫ng t√¥i ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ x·ª≠ l√Ω.</p>
        
        <p>Tr√¢n tr·ªçng,<br>ƒê·ªôi ng≈© TaxBot Vietnam</p>
      </div>
    `;
  }

  /**
   * T·∫°o email c·∫£nh b√°o h√≥a ƒë∆°n
   */
  private generateInvoiceWarningEmail(customer: any, invoices: any[]): string {
    const invoiceList = invoices.map(inv => 
      `<li>H√≥a ƒë∆°n ${inv.invoiceNumber}: ${inv.status}</li>`
    ).join('');

    return `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
        <h2 style="color: #ffc107;">‚ö†Ô∏è C·∫£nh b√°o h√≥a ƒë∆°n ƒëi·ªán t·ª≠</h2>
        <p>Ch√†o ${customer.firstName} ${customer.lastName},</p>
        
        <p>C√≥ h√≥a ƒë∆°n ƒëi·ªán t·ª≠ c·∫ßn xem x√©t:</p>
        
        <ul style="background: #fff3cd; padding: 15px; border-radius: 5px;">
          ${invoiceList}
        </ul>
        
        <p>Vui l√≤ng ki·ªÉm tra v√† x·ª≠ l√Ω c√°c h√≥a ƒë∆°n c√≥ v·∫•n ƒë·ªÅ.</p>
        
        <p>Tr√¢n tr·ªçng,<br>ƒê·ªôi ng≈© TaxBot Vietnam</p>
      </div>
    `;
  }

  /**
   * L·∫•y th·ªëng k√™ th√¥ng b√°o
   */
  getNotificationStats(): any {
    return {
      total: this.notifications.length,
      sent: this.notifications.filter(n => n.status === 'sent').length,
      failed: this.notifications.filter(n => n.status === 'failed').length,
      pending: this.notifications.filter(n => n.status === 'pending').length
    };
  }

  /**
   * L·∫•y danh s√°ch l·ªãch thu·∫ø
   */
  getSchedules(): TaxSchedule[] {
    return TAX_SCHEDULES;
  }
}

// Singleton instance
export const taxScheduler = new TaxSchedulerService();