/**
 * TaxBot Vietnam - Push Notifications Service
 * H·ªá th·ªëng th√¥ng b√°o ƒë·∫©y cho mobile app v√† web
 */

import webpush from 'web-push';

// VAPID configuration cho web push
const VAPID_CONFIG = {
  subject: process.env.VAPID_SUBJECT || 'mailto:admin@taxbot.vn',
  publicKey: process.env.VAPID_PUBLIC_KEY || '',
  privateKey: process.env.VAPID_PRIVATE_KEY || ''
};

// Interface cho subscription
interface PushSubscription {
  endpoint: string;
  keys: {
    p256dh: string;
    auth: string;
  };
}

// Interface cho th√¥ng b√°o
interface TaxNotification {
  title: string;
  body: string;
  icon?: string;
  badge?: string;
  data?: any;
  actions?: NotificationAction[];
  tag?: string;
  requireInteraction?: boolean;
}

interface NotificationAction {
  action: string;
  title: string;
  icon?: string;
}

// Storage cho subscriptions
class PushSubscriptionStorage {
  private subscriptions = new Map<string, PushSubscription[]>();

  /**
   * L∆∞u subscription cho user
   */
  addSubscription(userId: string, subscription: PushSubscription): void {
    const userSubscriptions = this.subscriptions.get(userId) || [];
    
    // Ki·ªÉm tra tr√πng l·∫∑p
    const exists = userSubscriptions.some(sub => sub.endpoint === subscription.endpoint);
    if (!exists) {
      userSubscriptions.push(subscription);
      this.subscriptions.set(userId, userSubscriptions);
      console.log(`üì± Added push subscription for user: ${userId}`);
    }
  }

  /**
   * L·∫•y subscriptions c·ªßa user
   */
  getSubscriptions(userId: string): PushSubscription[] {
    return this.subscriptions.get(userId) || [];
  }

  /**
   * X√≥a subscription kh√¥ng h·ª£p l·ªá
   */
  removeSubscription(userId: string, endpoint: string): void {
    const userSubscriptions = this.subscriptions.get(userId) || [];
    const filtered = userSubscriptions.filter(sub => sub.endpoint !== endpoint);
    this.subscriptions.set(userId, filtered);
    console.log(`üì± Removed push subscription for user: ${userId}`);
  }

  /**
   * L·∫•y t·∫•t c·∫£ subscriptions
   */
  getAllSubscriptions(): Map<string, PushSubscription[]> {
    return this.subscriptions;
  }
}

export class PushNotificationService {
  private subscriptionStorage = new PushSubscriptionStorage();

  constructor() {
    // C·∫•u h√¨nh VAPID
    if (VAPID_CONFIG.publicKey && VAPID_CONFIG.privateKey) {
      webpush.setVapidDetails(
        VAPID_CONFIG.subject,
        VAPID_CONFIG.publicKey,
        VAPID_CONFIG.privateKey
      );
      console.log('üì± VAPID configured for push notifications');
    } else {
      console.warn('‚ö†Ô∏è VAPID keys not configured - push notifications disabled');
    }
  }

  /**
   * ƒêƒÉng k√Ω push subscription
   */
  subscribe(userId: string, subscription: PushSubscription): void {
    this.subscriptionStorage.addSubscription(userId, subscription);
  }

  /**
   * H·ªßy ƒëƒÉng k√Ω push subscription
   */
  unsubscribe(userId: string, endpoint: string): void {
    this.subscriptionStorage.removeSubscription(userId, endpoint);
  }

  /**
   * G·ª≠i th√¥ng b√°o cho m·ªôt user
   */
  async sendToUser(userId: string, notification: TaxNotification): Promise<boolean> {
    const subscriptions = this.subscriptionStorage.getSubscriptions(userId);
    
    if (subscriptions.length === 0) {
      console.log(`No push subscriptions found for user: ${userId}`);
      return false;
    }

    const payload = JSON.stringify({
      title: notification.title,
      body: notification.body,
      icon: notification.icon || '/icon-192x192.png',
      badge: notification.badge || '/badge-72x72.png',
      data: notification.data || {},
      actions: notification.actions || [],
      tag: notification.tag,
      requireInteraction: notification.requireInteraction || false,
      timestamp: Date.now()
    });

    let successCount = 0;
    const promises = subscriptions.map(async (subscription) => {
      try {
        await webpush.sendNotification(subscription, payload);
        successCount++;
        return true;
      } catch (error: any) {
        if (error.statusCode === 410 || error.statusCode === 404) {
          // Subscription kh√¥ng c√≤n h·ª£p l·ªá
          this.subscriptionStorage.removeSubscription(userId, subscription.endpoint);
        }
        console.error(`Failed to send push notification to ${subscription.endpoint}:`, error);
        return false;
      }
    });

    await Promise.all(promises);
    
    console.log(`üì± Sent push notification to ${successCount}/${subscriptions.length} devices for user: ${userId}`);
    return successCount > 0;
  }

  /**
   * G·ª≠i th√¥ng b√°o cho t·∫•t c·∫£ users
   */
  async sendToAll(notification: TaxNotification): Promise<number> {
    const allSubscriptions = this.subscriptionStorage.getAllSubscriptions();
    let totalSent = 0;

    for (const [userId] of allSubscriptions) {
      const sent = await this.sendToUser(userId, notification);
      if (sent) totalSent++;
    }

    console.log(`üì± Broadcast notification sent to ${totalSent} users`);
    return totalSent;
  }

  /**
   * G·ª≠i th√¥ng b√°o nh·∫Øc thu·∫ø
   */
  async sendTaxReminder(userId: string, taxType: string, dueDate: string): Promise<boolean> {
    const notification: TaxNotification = {
      title: 'üîî Nh·∫Øc nh·ªü n·ªôp thu·∫ø',
      body: `${taxType} - H·∫°n n·ªôp: ${dueDate}`,
      icon: '/icon-192x192.png',
      badge: '/badge-72x72.png',
      tag: 'tax-reminder',
      requireInteraction: true,
      data: {
        type: 'tax-reminder',
        taxType,
        dueDate,
        url: '/ai-calculator'
      },
      actions: [
        {
          action: 'view',
          title: 'Xem chi ti·∫øt'
        },
        {
          action: 'dismiss',
          title: 'B·ªè qua'
        }
      ]
    };

    return await this.sendToUser(userId, notification);
  }

  /**
   * G·ª≠i c·∫£nh b√°o h√≥a ƒë∆°n
   */
  async sendInvoiceWarning(userId: string, invoiceCount: number): Promise<boolean> {
    const notification: TaxNotification = {
      title: '‚ö†Ô∏è C·∫£nh b√°o h√≥a ƒë∆°n ƒëi·ªán t·ª≠',
      body: `C√≥ ${invoiceCount} h√≥a ƒë∆°n c·∫ßn xem x√©t`,
      icon: '/icon-192x192.png',
      badge: '/badge-72x72.png',
      tag: 'invoice-warning',
      requireInteraction: true,
      data: {
        type: 'invoice-warning',
        count: invoiceCount,
        url: '/invoices'
      },
      actions: [
        {
          action: 'view',
          title: 'Ki·ªÉm tra'
        }
      ]
    };

    return await this.sendToUser(userId, notification);
  }

  /**
   * G·ª≠i th√¥ng b√°o h·∫øt h·∫°n k√™ khai
   */
  async sendDeclarationExpiry(userId: string, declarationType: string, daysLeft: number): Promise<boolean> {
    const notification: TaxNotification = {
      title: 'üö® H·∫øt h·∫°n k√™ khai',
      body: `${declarationType} h·∫øt h·∫°n trong ${daysLeft} ng√†y`,
      icon: '/icon-192x192.png',
      badge: '/badge-72x72.png',
      tag: 'declaration-expiry',
      requireInteraction: true,
      data: {
        type: 'declaration-expiry',
        declarationType,
        daysLeft,
        url: '/declarations'
      },
      actions: [
        {
          action: 'submit',
          title: 'N·ªôp ngay'
        },
        {
          action: 'remind',
          title: 'Nh·∫Øc sau'
        }
      ]
    };

    return await this.sendToUser(userId, notification);
  }

  /**
   * G·ª≠i th√¥ng b√°o th√†nh c√¥ng
   */
  async sendSuccessNotification(userId: string, message: string): Promise<boolean> {
    const notification: TaxNotification = {
      title: '‚úÖ Th√†nh c√¥ng',
      body: message,
      icon: '/icon-192x192.png',
      badge: '/badge-72x72.png',
      tag: 'success',
      data: {
        type: 'success',
        message
      }
    };

    return await this.sendToUser(userId, notification);
  }

  /**
   * G·ª≠i th√¥ng b√°o l·ªói
   */
  async sendErrorNotification(userId: string, message: string): Promise<boolean> {
    const notification: TaxNotification = {
      title: '‚ùå L·ªói x·ª≠ l√Ω',
      body: message,
      icon: '/icon-192x192.png',
      badge: '/badge-72x72.png',
      tag: 'error',
      requireInteraction: true,
      data: {
        type: 'error',
        message
      },
      actions: [
        {
          action: 'retry',
          title: 'Th·ª≠ l·∫°i'
        },
        {
          action: 'contact',
          title: 'Li√™n h·ªá h·ªó tr·ª£'
        }
      ]
    };

    return await this.sendToUser(userId, notification);
  }

  /**
   * G·ª≠i th√¥ng b√°o c·∫≠p nh·∫≠t ch·ªØ k√Ω s·ªë
   */
  async sendSignatureExpiryWarning(userId: string, daysLeft: number): Promise<boolean> {
    const notification: TaxNotification = {
      title: '‚ö†Ô∏è Ch·ªØ k√Ω s·ªë s·∫Øp h·∫øt h·∫°n',
      body: `Ch·ªØ k√Ω s·ªë c·ªßa b·∫°n h·∫øt h·∫°n trong ${daysLeft} ng√†y`,
      icon: '/icon-192x192.png',
      badge: '/badge-72x72.png',
      tag: 'signature-expiry',
      requireInteraction: true,
      data: {
        type: 'signature-expiry',
        daysLeft,
        url: '/profile/signature'
      },
      actions: [
        {
          action: 'update',
          title: 'C·∫≠p nh·∫≠t ngay'
        },
        {
          action: 'remind',
          title: 'Nh·∫Øc sau'
        }
      ]
    };

    return await this.sendToUser(userId, notification);
  }

  /**
   * L·∫•y th·ªëng k√™ push notifications
   */
  getStats(): any {
    const allSubscriptions = this.subscriptionStorage.getAllSubscriptions();
    let totalSubscriptions = 0;
    
    for (const subscriptions of allSubscriptions.values()) {
      totalSubscriptions += subscriptions.length;
    }

    return {
      totalUsers: allSubscriptions.size,
      totalSubscriptions,
      averageSubscriptionsPerUser: allSubscriptions.size > 0 ? totalSubscriptions / allSubscriptions.size : 0
    };
  }

  /**
   * Test push notification
   */
  async testNotification(userId: string): Promise<boolean> {
    const notification: TaxNotification = {
      title: 'üß™ Test Notification',
      body: 'TaxBot Vietnam push notification ƒëang ho·∫°t ƒë·ªông!',
      icon: '/icon-192x192.png',
      tag: 'test',
      data: {
        type: 'test',
        timestamp: Date.now()
      }
    };

    return await this.sendToUser(userId, notification);
  }
}

// Singleton instance
export const pushNotificationService = new PushNotificationService();