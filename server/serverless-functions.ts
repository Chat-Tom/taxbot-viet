/**
 * TaxBot Vietnam - Serverless Functions for Tax Automation
 * C√°c function x·ª≠ l√Ω nghi·ªáp v·ª• thu·∫ø t·ª± ƒë·ªông
 */

import { etaxService, digitalSignatureStorage } from './etax-integration';
import { pushNotificationService } from './push-notifications';
import { sendEmail } from './email-service';
import { jsonStorage } from './json-storage';

// Interface cho k·∫øt qu·∫£ x·ª≠ l√Ω
interface ProcessingResult {
  success: boolean;
  message: string;
  data?: any;
  errors?: string[];
}

// Interface cho tax automation task
interface TaxAutomationTask {
  id: string;
  customerId: string;
  taskType: 'declaration' | 'payment' | 'reminder' | 'check_status';
  priority: 'low' | 'medium' | 'high' | 'urgent';
  scheduledAt: string;
  executedAt?: string;
  status: 'pending' | 'processing' | 'completed' | 'failed' | 'retrying';
  retryCount: number;
  maxRetries: number;
  data: any;
  result?: ProcessingResult;
}

// Queue cho c√°c tasks
class TaskQueue {
  private tasks: TaxAutomationTask[] = [];
  private processing = false;

  addTask(task: TaxAutomationTask): void {
    this.tasks.push(task);
    this.tasks.sort((a, b) => {
      // S·∫Øp x·∫øp theo priority v√† th·ªùi gian
      const priorityOrder = { urgent: 4, high: 3, medium: 2, low: 1 };
      if (priorityOrder[a.priority] !== priorityOrder[b.priority]) {
        return priorityOrder[b.priority] - priorityOrder[a.priority];
      }
      return new Date(a.scheduledAt).getTime() - new Date(b.scheduledAt).getTime();
    });
  }

  getNextTask(): TaxAutomationTask | null {
    return this.tasks.find(task => 
      task.status === 'pending' && 
      new Date(task.scheduledAt) <= new Date()
    ) || null;
  }

  updateTask(taskId: string, updates: Partial<TaxAutomationTask>): void {
    const index = this.tasks.findIndex(t => t.id === taskId);
    if (index !== -1) {
      this.tasks[index] = { ...this.tasks[index], ...updates };
    }
  }

  getTasks(status?: string): TaxAutomationTask[] {
    return status ? this.tasks.filter(t => t.status === status) : this.tasks;
  }

  getTaskStats(): any {
    return {
      total: this.tasks.length,
      pending: this.tasks.filter(t => t.status === 'pending').length,
      processing: this.tasks.filter(t => t.status === 'processing').length,
      completed: this.tasks.filter(t => t.status === 'completed').length,
      failed: this.tasks.filter(t => t.status === 'failed').length
    };
  }
}

export class ServerlessTaxProcessor {
  private taskQueue = new TaskQueue();
  private isRunning = false;

  constructor() {
    this.startProcessor();
  }

  /**
   * Kh·ªüi ƒë·ªông b·ªô x·ª≠ l√Ω tasks
   */
  private startProcessor(): void {
    if (this.isRunning) return;
    
    this.isRunning = true;
    console.log('üöÄ Serverless tax processor started');
    
    // X·ª≠ l√Ω tasks m·ªói 30 gi√¢y
    setInterval(async () => {
      await this.processNextTask();
    }, 30000);
  }

  /**
   * X·ª≠ l√Ω task ti·∫øp theo trong queue
   */
  private async processNextTask(): Promise<void> {
    const task = this.taskQueue.getNextTask();
    if (!task) return;

    console.log(`‚ö° Processing task: ${task.id} - ${task.taskType}`);
    
    this.taskQueue.updateTask(task.id, {
      status: 'processing',
      executedAt: new Date().toISOString()
    });

    try {
      let result: ProcessingResult;

      switch (task.taskType) {
        case 'declaration':
          result = await this.processDeclaration(task);
          break;
        case 'payment':
          result = await this.processPayment(task);
          break;
        case 'reminder':
          result = await this.processReminder(task);
          break;
        case 'check_status':
          result = await this.checkStatus(task);
          break;
        default:
          result = {
            success: false,
            message: `Unknown task type: ${task.taskType}`
          };
      }

      this.taskQueue.updateTask(task.id, {
        status: result.success ? 'completed' : 'failed',
        result
      });

      if (!result.success && task.retryCount < task.maxRetries) {
        // Retry task
        this.taskQueue.updateTask(task.id, {
          status: 'pending',
          retryCount: task.retryCount + 1,
          scheduledAt: new Date(Date.now() + 60000 * Math.pow(2, task.retryCount)).toISOString() // Exponential backoff
        });
      }

      console.log(`‚úÖ Task ${task.id} ${result.success ? 'completed' : 'failed'}: ${result.message}`);

    } catch (error) {
      console.error(`‚ùå Task ${task.id} error:`, error);
      
      this.taskQueue.updateTask(task.id, {
        status: 'failed',
        result: {
          success: false,
          message: error instanceof Error ? error.message : 'Unknown error'
        }
      });
    }
  }

  /**
   * X·ª≠ l√Ω n·ªôp khai b√°o thu·∫ø t·ª± ƒë·ªông
   */
  private async processDeclaration(task: TaxAutomationTask): Promise<ProcessingResult> {
    try {
      const { customerId, declarationData, documents } = task.data;
      
      // L·∫•y ch·ªØ k√Ω s·ªë
      const signature = await digitalSignatureStorage.getSignature(customerId);
      if (!signature) {
        return {
          success: false,
          message: 'Kh√¥ng t√¨m th·∫•y ch·ªØ k√Ω s·ªë c·ªßa kh√°ch h√†ng'
        };
      }

      // X√°c th·ª±c v·ªõi eTax
      const accessToken = await etaxService.authenticateWithDigitalSignature(signature);
      
      // N·ªôp khai b√°o
      const declaration = await etaxService.submitTaxDeclaration(
        customerId,
        declarationData,
        documents,
        signature,
        accessToken
      );

      // G·ª≠i th√¥ng b√°o th√†nh c√¥ng
      await pushNotificationService.sendSuccessNotification(
        customerId,
        `ƒê√£ n·ªôp khai b√°o thu·∫ø th√†nh c√¥ng - M√£: ${declaration.declarationId}`
      );

      // G·ª≠i email x√°c nh·∫≠n
      await this.sendDeclarationConfirmationEmail(customerId, declaration);

      return {
        success: true,
        message: 'N·ªôp khai b√°o thu·∫ø th√†nh c√¥ng',
        data: { declarationId: declaration.declarationId }
      };

    } catch (error) {
      await pushNotificationService.sendErrorNotification(
        task.customerId,
        'N·ªôp khai b√°o thu·∫ø kh√¥ng th√†nh c√¥ng'
      );

      return {
        success: false,
        message: error instanceof Error ? error.message : 'L·ªói n·ªôp khai b√°o'
      };
    }
  }

  /**
   * X·ª≠ l√Ω thanh to√°n thu·∫ø t·ª± ƒë·ªông
   */
  private async processPayment(task: TaxAutomationTask): Promise<ProcessingResult> {
    try {
      const { customerId, paymentData } = task.data;
      
      // L·∫•y ch·ªØ k√Ω s·ªë
      const signature = await digitalSignatureStorage.getSignature(customerId);
      if (!signature) {
        return {
          success: false,
          message: 'Kh√¥ng t√¨m th·∫•y ch·ªØ k√Ω s·ªë c·ªßa kh√°ch h√†ng'
        };
      }

      // X√°c th·ª±c v·ªõi eTax
      const accessToken = await etaxService.authenticateWithDigitalSignature(signature);
      
      // L·∫•y th√¥ng tin thu·∫ø c·∫ßn n·ªôp
      const personalInfo = await etaxService.getPersonalTaxInfo(customerId, accessToken);
      
      if (personalInfo.remainingAmount <= 0) {
        return {
          success: true,
          message: 'Kh√¥ng c√≥ kho·∫£n thu·∫ø n√†o c·∫ßn thanh to√°n'
        };
      }

      // Th·ª±c hi·ªán thanh to√°n (gi·∫£ l·∫≠p)
      // Trong th·ª±c t·∫ø s·∫Ω t√≠ch h·ª£p v·ªõi c·ªïng thanh to√°n
      await this.simulatePayment(customerId, personalInfo.remainingAmount);

      // G·ª≠i th√¥ng b√°o th√†nh c√¥ng
      await pushNotificationService.sendSuccessNotification(
        customerId,
        `ƒê√£ thanh to√°n thu·∫ø th√†nh c√¥ng - S·ªë ti·ªÅn: ${personalInfo.remainingAmount.toLocaleString('vi-VN')} VND`
      );

      return {
        success: true,
        message: 'Thanh to√°n thu·∫ø th√†nh c√¥ng',
        data: { amount: personalInfo.remainingAmount }
      };

    } catch (error) {
      await pushNotificationService.sendErrorNotification(
        task.customerId,
        'Thanh to√°n thu·∫ø kh√¥ng th√†nh c√¥ng'
      );

      return {
        success: false,
        message: error instanceof Error ? error.message : 'L·ªói thanh to√°n'
      };
    }
  }

  /**
   * X·ª≠ l√Ω g·ª≠i nh·∫Øc nh·ªü
   */
  private async processReminder(task: TaxAutomationTask): Promise<ProcessingResult> {
    try {
      const { customerId, reminderType, message } = task.data;
      
      // G·ª≠i push notification
      const pushSent = await pushNotificationService.sendTaxReminder(
        customerId,
        reminderType,
        message
      );

      // G·ª≠i email backup n·∫øu push notification th·∫•t b·∫°i
      if (!pushSent) {
        const customer = await this.getCustomerInfo(customerId);
        if (customer?.email) {
          await sendEmail({
            to: customer.email,
            from: 'noreply@taxbot.vn',
            subject: 'üîî Nh·∫Øc nh·ªü n·ªôp thu·∫ø - TaxBot Vietnam',
            html: `
              <h2>Nh·∫Øc nh·ªü n·ªôp thu·∫ø</h2>
              <p>Ch√†o ${customer.firstName} ${customer.lastName},</p>
              <p>${message}</p>
              <p>Tr√¢n tr·ªçng,<br>ƒê·ªôi ng≈© TaxBot Vietnam</p>
            `
          });
        }
      }

      return {
        success: true,
        message: 'G·ª≠i nh·∫Øc nh·ªü th√†nh c√¥ng'
      };

    } catch (error) {
      return {
        success: false,
        message: error instanceof Error ? error.message : 'L·ªói g·ª≠i nh·∫Øc nh·ªü'
      };
    }
  }

  /**
   * Ki·ªÉm tra tr·∫°ng th√°i x·ª≠ l√Ω
   */
  private async checkStatus(task: TaxAutomationTask): Promise<ProcessingResult> {
    try {
      const { customerId, declarationId } = task.data;
      
      // L·∫•y ch·ªØ k√Ω s·ªë
      const signature = await digitalSignatureStorage.getSignature(customerId);
      if (!signature) {
        return {
          success: false,
          message: 'Kh√¥ng t√¨m th·∫•y ch·ªØ k√Ω s·ªë c·ªßa kh√°ch h√†ng'
        };
      }

      // X√°c th·ª±c v·ªõi eTax
      const accessToken = await etaxService.authenticateWithDigitalSignature(signature);
      
      // Ki·ªÉm tra tr·∫°ng th√°i khai b√°o
      const declaration = await etaxService.checkDeclarationStatus(declarationId, accessToken);
      
      // G·ª≠i th√¥ng b√°o c·∫≠p nh·∫≠t tr·∫°ng th√°i
      let notificationMessage = '';
      switch (declaration.status) {
        case 'approved':
          notificationMessage = 'Khai b√°o thu·∫ø ƒë√£ ƒë∆∞·ª£c duy·ªát';
          break;
        case 'rejected':
          notificationMessage = 'Khai b√°o thu·∫ø b·ªã t·ª´ ch·ªëi';
          break;
        case 'processing':
          notificationMessage = 'Khai b√°o thu·∫ø ƒëang ƒë∆∞·ª£c x·ª≠ l√Ω';
          break;
      }

      if (notificationMessage) {
        await pushNotificationService.sendToUser(customerId, {
          title: 'üìã C·∫≠p nh·∫≠t tr·∫°ng th√°i khai b√°o',
          body: notificationMessage,
          data: { declarationId, status: declaration.status }
        });
      }

      return {
        success: true,
        message: 'Ki·ªÉm tra tr·∫°ng th√°i th√†nh c√¥ng',
        data: { status: declaration.status }
      };

    } catch (error) {
      return {
        success: false,
        message: error instanceof Error ? error.message : 'L·ªói ki·ªÉm tra tr·∫°ng th√°i'
      };
    }
  }

  /**
   * Gi·∫£ l·∫≠p thanh to√°n
   */
  private async simulatePayment(customerId: string, amount: number): Promise<void> {
    // Trong th·ª±c t·∫ø s·∫Ω t√≠ch h·ª£p v·ªõi ng√¢n h√†ng/c·ªïng thanh to√°n
    console.log(`üí≥ Simulated payment: ${customerId} - ${amount.toLocaleString('vi-VN')} VND`);
    
    // Gi·∫£ l·∫≠p delay x·ª≠ l√Ω
    await new Promise(resolve => setTimeout(resolve, 2000));
  }

  /**
   * L·∫•y th√¥ng tin kh√°ch h√†ng
   */
  private async getCustomerInfo(customerId: string): Promise<any> {
    const submissions = await jsonStorage.getSubmissions();
    return submissions.find(s => s.id === customerId);
  }

  /**
   * G·ª≠i email x√°c nh·∫≠n khai b√°o
   */
  private async sendDeclarationConfirmationEmail(customerId: string, declaration: any): Promise<void> {
    const customer = await this.getCustomerInfo(customerId);
    if (!customer?.email) return;

    await sendEmail({
      to: customer.email,
      from: 'noreply@taxbot.vn',
      subject: '‚úÖ X√°c nh·∫≠n n·ªôp khai b√°o thu·∫ø th√†nh c√¥ng',
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <h2 style="color: #28a745;">‚úÖ N·ªôp khai b√°o thu·∫ø th√†nh c√¥ng</h2>
          <p>Ch√†o ${customer.firstName} ${customer.lastName},</p>
          
          <p>Khai b√°o thu·∫ø c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c n·ªôp th√†nh c√¥ng:</p>
          
          <div style="background: #f8f9fa; padding: 15px; border-radius: 5px; margin: 20px 0;">
            <p><strong>M√£ khai b√°o:</strong> ${declaration.declarationId}</p>
            <p><strong>Lo·∫°i khai b√°o:</strong> ${declaration.declarationType}</p>
            <p><strong>K·ª≥ thu·∫ø:</strong> ${declaration.taxPeriod}</p>
            <p><strong>Ng√†y n·ªôp:</strong> ${new Date(declaration.submissionDate).toLocaleDateString('vi-VN')}</p>
          </div>
          
          <p>TaxBot Vietnam s·∫Ω ti·∫øp t·ª•c theo d√µi v√† th√¥ng b√°o cho b·∫°n v·ªÅ tr·∫°ng th√°i x·ª≠ l√Ω.</p>
          
          <p>Tr√¢n tr·ªçng,<br>ƒê·ªôi ng≈© TaxBot Vietnam</p>
        </div>
      `
    });
  }

  /**
   * API Methods
   */

  /**
   * Th√™m task m·ªõi
   */
  addTask(task: Omit<TaxAutomationTask, 'id' | 'status' | 'retryCount'>): string {
    const fullTask: TaxAutomationTask = {
      ...task,
      id: `task_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,
      status: 'pending',
      retryCount: 0
    };

    this.taskQueue.addTask(fullTask);
    console.log(`üìù Added new task: ${fullTask.id} - ${fullTask.taskType}`);
    
    return fullTask.id;
  }

  /**
   * L√™n l·ªãch n·ªôp khai b√°o t·ª± ƒë·ªông
   */
  scheduleDeclaration(customerId: string, declarationData: any, documents: Buffer[], scheduledAt: Date): string {
    return this.addTask({
      customerId,
      taskType: 'declaration',
      priority: 'high',
      scheduledAt: scheduledAt.toISOString(),
      maxRetries: 3,
      data: { customerId, declarationData, documents }
    });
  }

  /**
   * L√™n l·ªãch thanh to√°n t·ª± ƒë·ªông
   */
  schedulePayment(customerId: string, paymentData: any, scheduledAt: Date): string {
    return this.addTask({
      customerId,
      taskType: 'payment',
      priority: 'high',
      scheduledAt: scheduledAt.toISOString(),
      maxRetries: 3,
      data: { customerId, paymentData }
    });
  }

  /**
   * L√™n l·ªãch nh·∫Øc nh·ªü
   */
  scheduleReminder(customerId: string, reminderType: string, message: string, scheduledAt: Date): string {
    return this.addTask({
      customerId,
      taskType: 'reminder',
      priority: 'medium',
      scheduledAt: scheduledAt.toISOString(),
      maxRetries: 2,
      data: { customerId, reminderType, message }
    });
  }

  /**
   * L√™n l·ªãch ki·ªÉm tra tr·∫°ng th√°i
   */
  scheduleStatusCheck(customerId: string, declarationId: string, scheduledAt: Date): string {
    return this.addTask({
      customerId,
      taskType: 'check_status',
      priority: 'low',
      scheduledAt: scheduledAt.toISOString(),
      maxRetries: 5,
      data: { customerId, declarationId }
    });
  }

  /**
   * L·∫•y th·ªëng k√™
   */
  getStats(): any {
    return this.taskQueue.getTaskStats();
  }

  /**
   * L·∫•y danh s√°ch tasks
   */
  getTasks(status?: string): TaxAutomationTask[] {
    return this.taskQueue.getTasks(status);
  }
}

// Singleton instance
export const serverlessTaxProcessor = new ServerlessTaxProcessor();